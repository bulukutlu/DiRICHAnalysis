#ifndef CONSTANTS_H
#define CONSTANTS_H

#include "Utility.h"
#include <map>

/// This namespace holds some useful constants
namespace constants
{
  /// This gain correction is taken from the single SiPM lab measurement with 17ns ToT, pulled to 17ns
  /// Start with 0 for convenience. Channels count from 1 to 16.
  /*const std::map<Padiwa, std::vector<Float_t>> padiwaGainCorr_From17ns{
    { Padiwa::p1500_0, {0, 0.987607, 0.982198, 0.982853, 0.962533, 0.986201, 0.971491, 0.986511, 0.964003, 0.977723, 0.98086,  0.997423, 0.991264, 0.995791, 0.969362, 0.988589, 0.977917} },
    { Padiwa::p1500_1, {0, 0.980463, 0.975225, 0.969166, 0.959458, 0.98996,  0.968009, 1.01952,  0.975157, 1.01541,  0.984274, 1.03706,  0.984229, 0.988672, 0.97452,  0.99212,  0.986311} },
    { Padiwa::p1510_0, {0, 0.971294, 0.955605, 0.980716, 0.968239, 0.988139, 0.982677, 0.971876, 0.973666, 0.995571, 0.976427, 1.00056,  0.984334, 1.00815,  0.985369, 1.0177,   0.958632} },
    { Padiwa::p1510_1, {0, 0.770173, 0.750401, 0.762083, 0.759169, 0.783463, 0.765596, 0.780638, 0.764233, 0.788778, 0.765545, 0.796847, 0.767447, 0.774087, 0.767256, 0.779657, 0.736988} },
    { Padiwa::p1520_0, {0, 0.991795, 0.979855, 1.02407,  1.00601,  1.02291,  0.889292, 0.98788,  0.997152, 1.00998,  1.00036,  0.986877, 1.01166,  1.01326,  1.00687,  1.00016,  0.906896} },
    { Padiwa::p1520_1, {0, 0.947647, 0.908554, 1.01081,  0.903525, 0.905796, 0.890025, 1.00982,  0.98794,  1.01928,  0.96671,  1.01787,  1.0079,   1.00569,  1.0118,   1.0125,   1.00322 } },
    { Padiwa::p1530_0, {0, 0.981866, 0.963517, 0.981669, 0.906477, 0.996072, 0.992507, 0.96107,  0.976094, 0.987845, 0.997806, 0.928907, 1.00933,  1.01977,  1.00189,  1.01579,  1.01581 } },
    { Padiwa::p1530_1, {0, 0.980721, 0.974142, 0.976805, 0.963183, 0.992286, 0.979266, 1.00755,  0.992255, 1.01589,  0.977732, 1.02697,  1.00499,  0.89888,  1.00851,  0.996421, 1.00923 } }
  };*/

  const std::map<Padiwa, std::vector<Float_t>> padiwaGainCorr{
    { Padiwa::p1500_0, {0, 0.993956, 0.947748, 1.00321, 0.94972, 0.998419, 0.956976, 1.01428, 0.990555, 1.00563, 0.947146, 1.07335, 0.983669, 1.00338, 0.975554, 1.0446, 0.945965} },
    { Padiwa::p1500_1, {0, 0.944714, 0.942939, 0.990904, 0.916818, 0.995356, 0.960099, 1.02405, 0.98154, 1.05413, 0.961365, 1.11653, 0.964116, 0.984794, 0.990447, 1.03075, 0.994417} },
    { Padiwa::p1510_0, {0, 0.977523, 0.959283, 0.989304, 0.958931, 0.982616, 0.970987, 0.969084, 0.983486, 1.04562, 0.992069, 1.05032, 0.965812, 0.987799, 0.985607, 1.08823, 1.00406} },
    { Padiwa::p1510_1, {0, 0.784554, 0.781036, 0.807956, 0.758834, 0.860381, 0.806506, 0.827641, 0.823715, 0.890939, 0.82255, 0.949603, 0.848266, 0.866951, 0.854033, 0.913789, 0.870034} },
    { Padiwa::p1520_0, {0, 1.04055, 1.00369, 1.01435, 1.00105, 1.02302, 1.01781, 0.977576, 1.0419, 1.06463, 1.0319, 1.07306, 1.01746, 0.972681, 0.994663, 1.08634, 1.09449} },
    { Padiwa::p1520_1, {0, 1.03476, 1.03128, 0.989076, 0.992776, 1.00963, 0.999363, 1.0192, 1.03511, 1.09152, 1.01686, 1.14649, 1.01658, 0.978441, 1.00529, 1.0982, 1.06285} },
    { Padiwa::p1530_0, {0, 0.968393, 0.939864, 0.994725, 0.955928, 1.01725, 0.997672, 0.975516, 1.01673, 1.01239, 1.00043, 1.11051, 0.956801, 0.989546, 0.9773, 1.06581, 0.992145} },
    { Padiwa::p1530_1, {0, 0.993151, 0.983221, 0.991312, 0.964011, 1.02646, 0.968639, 1.02203, 1.01134, 1.05858, 0.960808, 1.11341, 0.974927, 0.961498, 1.00427, 1.04407, 1.05516} }
  };

  //===========================================================================================================================
  /// Values are from all 0 deg, threshold 100 pion data at config 0 and 4
  /// Just for the fun of it try to calibrate module gain also via padiwa mapping
  /// @todo Still does only work properly for config 0 and 4 for some reason. Maybe the mapping between configs is still bugged

  /// calibration data for module gain in padiwa mapping for all configs
  /// This data is from the 17ns at thr 1000 measurement
  /*const std::vector<Float_t> evenL1{0, 1, 1.02341, 1.02292, 1.04981, 0.997358, 0.989739, 1.03216, 1.03005, 1.08519, 1.09226, 1.03425, 1.05183, 1.04195, 1.03613, 1.01953, 1.13519};
  const std::vector<Float_t> oddL1 {0, 1.01316, 0.958603, 1.03281, 1.01474, 1.0288, 1.01472, 1.03469, 0.96595, 1.03597, 0.97243, 0.924156, 1.04263, 0.983131, 1.0501, 0.963964, 0.991821};
  const std::vector<Float_t> oddL2 {0, 1.10677, 1.05645, 1.0938, 1.10732, 1.06491, 1.06157, 1.06197, 1.01882, 1.05191, 1.04991, 1.02657, 0.984047, 1.05505, 1.03151, 1.04504, 1.12246};
  const std::vector<Float_t> evenL2{0, 1.0766, 1.09203, 1.04346, 1.02166, 1.04144, 1.07376, 1.11534, 1.04617, 1.04948, 1.07308, 1.05799, 1.03389, 1.1078, 1.05044, 1.10178, 1.10936};
  const std::vector<Float_t> evenL3{0, 1.03195, 0.829996, 1.10503, 1.00618, 0.988877, 1.10752, 0.979857, 1.10822, 1.12954, 1.02145, 0.999274, 1.0014, 1.00845, 0.975583, 0.981546, 1.07211};
  const std::vector<Float_t> oddL3 {0, 0.985808, 1.04559, 0.905743, 1.05649, 1.04233, 2.22604, 0.940251, 0.959859, 1.01583, 1.07941, 1.02949, 1.01391, 1.04828, 1.04587, 0.963696, 1.01468};
  const std::vector<Float_t> oddL4 {0, 1.07862, 0.972184, 1.14781, 1.1037, 1.06798, 0.967357, 0.963943, 0.98318, 1.06324, 1.03426, 1.19806, 1.02358, 0.968492, 1.00498, 1.04071, 0.975811};
  const std::vector<Float_t> evenL4{0, 0.953663, 0.993916, 1.02457, 0.998031, 1.0193, 1.00559, 1.02632, 1.02276, 1.07429, 0.949977, 1.01753, 1.08077, 1.21467, 0.958252, 0.978281, 1.07261};
  const std::vector<Float_t> evenL5{0, 1.10194, 1.08369, 1.11499, 1.08367, 1.04087, 0.994972, 0.983326, 0.987225, 1.02662, 1.00852, 1.04782, 1.06685, 1.02417, 1.07763, 1.07964, 1.11357};
  const std::vector<Float_t> oddL5 {0, 0.975164, 0.960273, 0.961474, 0.950778, 0.951679, 0.97298, 0.96293, 0.961877, 0.944327, 0.981118, 0.988431, 0.993526, 0.979192, 0.964963, 0.971273, 0.979305};
  const std::vector<Float_t> oddL6 {0, 1.0471, 1.07265, 1.04533, 1.09132, 1.06103, 1.04333, 1.07711, 1.01321, 0.975756, 1.02574, 0.997689, 1.05734, 0.975826, 1.01368, 1.03586, 1.09413};
  const std::vector<Float_t> evenL6{0, 0.983831, 1.07672, 1.04306, 1.05613, 1.06258, 1.07575, 1.02807, 1.02173, 1.04693, 1.10981, 1.06562, 1.1653, 1.09343, 1.10379, 1.15706, 1.19281};
  const std::vector<Float_t> evenL7{0, 1.13864, 1.08128, 1.07073, 1.04132, 1.01996, 1.09403, 0.976913, 0.956427, 1.01054, 1.00994, 1.07301, 1.06727, 0.99387, 1.06228, 1.08725, 1.18405};
  const std::vector<Float_t> oddL7 {0, 0.994394, 1.03709, 0.92806, 1.00646, 1.03995, 1.07247, 0.968598, 0.960843, 0.957009, 1.01914, 1.00231, 0.96511, 0.955449, 0.933473, 0.964683, 0.969945};
  const std::vector<Float_t> oddL8 {0, 1.06028, 1.06022, 1.05361, 1.18319, 1.06444, 1.06493, 1.08415, 1.02703, 0.997279, 1.01285, 1.09025, 1.05126, 0.981906, 1.00339, 1.04789, 1.09548};
  const std::vector<Float_t> evenL8{0, 0.968121, 1.00388, 0.982492, 0.99868, 1.01146, 1.00543, 0.964796, 0.960035, 0.992841, 1.03932, 1.00915, 1.0716, 1.1286, 1.00293, 1.07721, 1.05695};
*/
  const std::vector<Float_t> evenL1{0, 1, 1.06742, 1.00859, 1.07081, 0.991491, 1.0112, 1.01034, 1.00888, 1.06186, 1.13838, 0.967268, 1.06676, 1.04072, 1.03616, 0.97106, 1.181};
  const std::vector<Float_t> oddL1 {0, 1.05822, 0.99779, 1.01662, 1.06873, 1.02979, 1.02965, 1.03672, 0.96583, 1.00435, 1.00199, 0.863887, 1.07122, 0.993332, 1.03984, 0.933794, 0.990047};
  const std::vector<Float_t> oddL2 {0, 1.10678, 1.05915, 1.09128, 1.12526, 1.07777, 1.08125, 1.07188, 1.01513, 1.00801, 1.04, 0.984215, 1.00935, 1.08367, 1.03788, 0.983577, 1.07864};
  const std::vector<Float_t> evenL2{0, 1.06366, 1.05592, 0.990527, 1.02867, 0.954421, 1.02584, 1.05881, 0.976863, 0.935091, 1.00513, 0.893512, 0.941386, 0.995498, 0.949756, 0.946118, 0.945834};
  const std::vector<Float_t> evenL3{0, 0.989901, 0.815465, 1.12278, 1.01765, 0.995117, 0.973885, 0.99653, 1.06746, 1.07849, 0.996577, 0.924912, 1.00208, 1.05728, 0.993888, 0.909472, 0.894059};
  const std::vector<Float_t> oddL3 {0, 0.908609, 0.927067, 0.931583, 0.967688, 0.941146, 2.07919, 0.937576, 0.921993, 0.954717, 1.03279, 0.919895, 1.01172, 1.08437, 1.05937, 0.894193, 0.963966};
  const std::vector<Float_t> oddL4 {0, 1.10067, 1.00305, 1.14004, 1.05333, 1.05246, 0.968539, 0.955759, 0.949945, 1.04412, 1.0382, 1.00874, 1.08671, 1.00449, 1.03688, 0.998238, 1.00551};
  const std::vector<Float_t> evenL4{0, 0.947767, 0.991058, 1.01606, 1.00357, 0.99168, 1.02314, 1.01829, 1.0099, 1.03759, 0.972911, 0.944561, 1.12124, 1.14286, 0.968473, 0.939624, 1.03257};
  const std::vector<Float_t> evenL5{0, 1.10202, 1.12991, 1.09947, 1.10527, 1.0347, 1.01651, 0.962522, 0.96694, 1.00451, 1.05115, 0.979934, 1.08196, 1.02295, 1.07761, 1.02834, 1.15837};
  const std::vector<Float_t> oddL5 {0, 1.01863, 0.999607, 0.946385, 1.0014, 0.952564, 0.98728, 0.964858, 0.961767, 0.915431, 1.01099, 0.923966, 1.02074, 0.989343, 0.955558, 0.94087, 0.977529};
  const std::vector<Float_t> oddL6 {0, 1.04708, 1.07535, 1.04291, 1.10892, 1.07383, 1.06257, 1.08714, 1.00951, 0.935018, 1.01605, 0.956523, 1.08455, 1.00224, 1.01992, 0.975021, 1.05132};
  const std::vector<Float_t> evenL6{0, 0.972037, 1.04112, 0.990178, 1.06334, 0.973832, 1.02768, 0.975903, 0.954027, 0.932863, 1.03959, 0.900029, 1.06141, 0.98258, 0.998048, 0.993747, 1.01727};
  const std::vector<Float_t> evenL7{0, 1.09288, 1.06253, 1.08793, 1.05326, 1.02639, 0.962057, 0.993565, 0.921228, 0.964879, 0.985364, 0.993157, 1.06799, 1.04202, 1.08219, 1.00747, 0.98774};
  const std::vector<Float_t> oddL7 {0, 0.916517, 0.919527, 0.954525, 0.921895, 0.939054, 0.961288, 0.965865, 0.922953, 0.899452, 0.975103, 0.895638, 0.963056, 0.988285, 0.945467, 0.895126, 0.921563};
  const std::vector<Float_t> oddL8 {0, 1.082, 1.09387, 1.04641, 1.12962, 1.04902, 1.06632, 1.07502, 0.992373, 0.979371, 1.01668, 0.917836, 1.11599, 1.01841, 1.03521, 1.00515, 1.12884};
  const std::vector<Float_t> evenL8{0, 0.962174, 1.00102, 0.974333, 1.00423, 0.984079, 1.02298, 0.957224, 0.947948, 0.958905, 1.06444, 0.936925, 1.11143, 1.06185, 1.0136, 1.03469, 1.01745};

  const std::map<PadiwaSocket, std::vector<Float_t>> testModuleGainMapping {
    { PadiwaSocket::L1even, evenL1 },
    { PadiwaSocket::L2even, evenL2 },
    { PadiwaSocket::L3even, evenL3 },
    { PadiwaSocket::L4even, evenL4 },
    { PadiwaSocket::L5even, evenL5 },
    { PadiwaSocket::L6even, evenL6 },
    { PadiwaSocket::L7even, evenL7 },
    { PadiwaSocket::L8even, evenL8 },
    { PadiwaSocket::L1odd,  oddL1  },
    { PadiwaSocket::L2odd,  oddL2  },
    { PadiwaSocket::L3odd,  oddL3  },
    { PadiwaSocket::L4odd,  oddL4  },
    { PadiwaSocket::L5odd,  oddL5  },
    { PadiwaSocket::L6odd,  oddL6  },
    { PadiwaSocket::L7odd,  oddL7  },
    { PadiwaSocket::L8odd,  oddL8  }
  };

  /*const std::map<Padiwa, std::vector<Float_t>> testModuleGainCorrC0{
    { Padiwa::p1500_0, evenL1 },
    { Padiwa::p1500_1, oddL1  },
    { Padiwa::p1510_0, oddL2  },
    { Padiwa::p1510_1, evenL2 },
    { Padiwa::p1520_0, evenL3 },
    { Padiwa::p1520_1, oddL3  },
    { Padiwa::p1530_0, oddL4  },
    { Padiwa::p1530_1, evenL4 }
  };
  const std::map<Padiwa, std::vector<Float_t>> testModuleGainCorrC1{
    { Padiwa::p1500_0, evenL1 },
    { Padiwa::p1500_1, oddL1  },
    { Padiwa::p1510_0, evenL3 },
    { Padiwa::p1510_1, oddL3  },
    { Padiwa::p1520_0, evenL5 },
    { Padiwa::p1520_1, oddL5  },
    { Padiwa::p1530_0, evenL2 },
    { Padiwa::p1530_1, evenL6 }
  };
  const std::map<Padiwa, std::vector<Float_t>> testModuleGainCorrC2{
    { Padiwa::p1500_0, evenL1 },
    { Padiwa::p1500_1, oddL1  },
    { Padiwa::p1510_0, evenL3 },
    { Padiwa::p1510_1, oddL3  },
    { Padiwa::p1520_0, evenL5 },
    { Padiwa::p1520_1, oddL5  },
    { Padiwa::p1530_0, oddL2  },
    { Padiwa::p1530_1, evenL2 }
  };
  const std::map<Padiwa, std::vector<Float_t>> testModuleGainCorrC3{
    { Padiwa::p1500_0, evenL3 },
    { Padiwa::p1500_1, oddL3  },
    { Padiwa::p1510_0, oddL4  },
    { Padiwa::p1510_1, evenL4 },
    { Padiwa::p1520_0, evenL1 },
    { Padiwa::p1520_1, oddL1  },
    { Padiwa::p1530_0, oddL2  },
    { Padiwa::p1530_1, evenL2 }
  };
  const std::map<Padiwa, std::vector<Float_t>> testModuleGainCorrC4{
    { Padiwa::p1500_0, evenL5 },
    { Padiwa::p1500_1, oddL5  },
    { Padiwa::p1510_0, oddL6  },
    { Padiwa::p1510_1, evenL6 },
    { Padiwa::p1520_0, evenL7 },
    { Padiwa::p1520_1, oddL7  },
    { Padiwa::p1530_0, oddL8  },
    { Padiwa::p1530_1, evenL8 }
  };

  const std::map<Int_t, std::map<Padiwa, std::vector<Float_t>>> moduleGainConfigMap{
    {0, testModuleGainCorrC0},
    {1, testModuleGainCorrC1},
    {2, testModuleGainCorrC2},
    {3, testModuleGainCorrC3},
    {4, testModuleGainCorrC4}
  };*/
  //===========================================================================================================================

  /// T0 calibration is taken from lab measurement
  const std::map<Padiwa, std::vector<Float_t>> padiwaTimeCorr{
    { Padiwa::p1500_0, {0, 6.93889E-16, 1.11542,  0.8119,      2.251916, -0.922404, -0.453114,  0.8883776, 0.155795, -0.938464, -1.540544,   -0.809134, -1.552644, -0.692764, -0.464704,  -2.004604, -2.406544} },
    { Padiwa::p1500_1, {0, 2.517826,    2.66 ,    3.397055,    4.096766,  2.263641,  1.699249,  0.276526,  1.177086, -1.945154, -0.044184,   -1.795594, -1.466974,  5.072366,  5.563236,   3.990506,  1.566279} },
    { Padiwa::p1510_0, {0, 6.93889E-16, 1.11542,  1.24223,     2.67931,  -0.456091, -0.0149989, 1.3712,    0.504082, -0.370934, -1.08655,    -0.454727, -1.31195,  -0.195293, -0.0461142, -1.59216,  -1.91812 } },
    { Padiwa::p1510_1, {0, 2.891333,    2.330744, 2.8694499,   4.381363,  2.458993,  2.126462,  0.312753,  1.072663, -2.297937, -0.179747,   -1.741817, -1.241587,  5.008823,  5.596693,   4.036363,  1.282623} },
    { Padiwa::p1520_0, {0, 6.93889E-16, 1.11542,  0.934946,    2.728777, -0.540214, -0.227886,  1.211543,  0.485613, -0.730095, -1.434413,   -0.420441, -1.241343, -0.531263, -0.35043,   -1.803833, -2.009693} },
    { Padiwa::p1520_1, {0, 2.891333,    2.0,      2.890576515, 3.845229,  1.818433,  1.217863, -0.1303969, 0.809853, -2.326017, -0.38771699, -2.312257, -1.806617,  4.719783,  5.478213,   3.806037,  1.246643} },
    { Padiwa::p1530_0, {0, 6.93889E-16, 1.32542,  1.16687,     2.82989,  -0.452611, -0.0387911, 1.36946,   0.700189, -0.505421, -0.957971,   -0.212678, -1.27323,  -0.0845989, 0.0808505, -1.39277,  -1.85497 } },
    { Padiwa::p1530_1, {0, 2.517826,    3.275819, 4.234145,    4.983406,  3.082846,  2.491707,  1.043966,  2.101356, -1.143034,  0.760086,   -0.998524, -0.563224,  5.807756,  6.502226,   4.881126,  2.503614} }
  };

  /// Mapping: fibers in layer --> Appication of gain correction seems not to work with fiber mapping
  /// This is the calib data from the SiPM 17ns with threshold 1000 measurement
  /*const std::map<Int_t, std::vector<Float_t>> testModuleGainCorr{
    { 1, {0, 1.01756,  1.13049, 0.961194, 1.01615,  1.03061,  1.03093,  1.01222,  1.03952, 1.02418,  1.04839,  1.00747,  1.03168,  1.02917,  1.09407,  0.959934, 1.08383, 1.02722,  1.03063,  0.967899, 1.03021,  0.916707, 0.987822, 1.0377,   0.997188, 0.97635,  1.0474,  1.04184,  1.02215,  0.95847,  1.01981,  0.984399, 1       } },
    { 2, {0, 1.10268,  1.12357, 1.05235,  1.10826,  1.08693,  1.05727,  1.10271,  1.11615, 1.05991,  1.0389,   1.05644,  1.06378,  1.05769,  1.07892,  1.01485,  1.05459, 1.04893,  1.04956,  1.04361,  1.12681,  1.02459,  1.07985,  0.980756, 1.0469,   1.05099,  1.02804, 1.02652,  1.04735,  1.0438,   1.09815,  1.11668,  1.08084 } },
    { 3, {0, 0.984313, 1.06928, 1.04402,  0.979044, 0.904923, 0.975538, 1.05317,  1.00462, 1.03763,  0.999218, 2.15065,  0.999866, 0.936693, 1.01763,  0.954727, 1.12425, 1.00721,  1.10563,  1.07315,  0.978296, 1.02348,  1.10705,  1.00583,  0.986814, 1.04021,  1.00423, 1.03445,  1.10378,  0.958093, 0.829266, 1.0036,   1.03191 } },
    { 4, {0, 1.07219,  1.0836,  0.97014,  0.988368, 1.14203,  0.96263,  1.10147,  1.22094, 1.06694,  1.08884,  0.965461, 1.02077,  0.961892, 0.952797, 0.98126,  1.07823, 1.05948,  1.02497,  1.02983,  1.03269,  1.18899,  1.01033,  1.02153,  1.02627,  0.964498, 1.0039,  1.0044,   1.02945,  1.03526,  0.999944, 0.974704, 0.958631} },
    { 5, {0, 0.97638,  1.15566, 0.959076, 1.07122,  0.954682, 1.07249,  0.976371, 1.05611, 0.967512, 1.10026,  0.987327, 1.08084,  0.938223, 1.01522,  0.980814, 1.08118, 0.921657, 0.982472, 0.954617, 1.01384,  1.0137,   1.04914,  0.994897, 1.05253,  0.942088, 1.14041, 0.965618, 1.19864,  0.957307, 1.1974,   0.987671, 1.36039 } },
    { 6, {0, 1.04901,  1.26341, 1.10695,  1.21882,  1.04924,  1.11204,  1.0395,   1.07608, 1.02255,  1.12895,  0.980368, 1.00826,  1.09127,  1.10719,  1.0058,   1.04224, 1.00333,  1.00565,  1.02327,  1.02384,  1.01148,  1.07204,  1.05302,  1.09787,  0.925881, 1.10989, 1.03991,  1.08769,  1.06221,  1.0619,   1.05693,  0.995045} },
    { 7, {0, 0.995394, 1.24109, 1.06771,  1.15107,  0.96462,  1.13591,  1.01184,  1.0078,  1.05656,  1.09123,  1.09774,  1.08649,  1.03265,  1.03764,  0.969875, 1.00683, 1.02026,  0.99377,  1.07846,  0.980422, 1.01811,  1.08802,  1.00305,  1.03796,  1.02845,  1.06615, 0.961765, 1.05218,  1.00289,  1.04129,  1.0006,   1.00902 } },
    { 8, {0, 1.08731,  1.07163, 1.07364,  1.0985,   1.10152,  1.0416,   1.33397,  1.21385, 1.1496,   1.20425,  1.19269,  1.13712,  1.12446,  1.08371,  1.09677,  1.041,   1.00934,  1.02438,  1.0722,   1.01843,  1.12161,  1.06105,  1.10506,  1.02172,  1.08304,  0.99867, 1.01926,  0.981239, 1.07711,  1.06633,  1.19612,  0.987036} }
  };*/

  const std::map<Int_t, std::vector<Float_t>> testModuleGainCorr{
    { 1, {0, 1.05822, 1.181, 0.99779, 0.97106, 1.01662, 1.03616, 1.06873, 1.04072, 1.02979, 1.06676, 1.02965, 0.967268, 1.03672, 1.13838, 0.96583, 1.06186, 1.00435, 1.00888, 1.00199, 1.01034, 0.863887, 1.0112, 1.07122, 0.991491, 0.993332, 1.07081, 1.03984, 1.00859, 0.933794, 1.06742, 0.990047, 1} },
    { 2, {0, 1.10678, 0.945834, 1.05915, 0.946118, 1.09128, 0.949756, 1.12526, 0.995498, 1.07777, 0.941386, 1.08125, 0.893512, 1.07188, 1.00513, 1.01513, 0.935091, 1.00801, 0.976863, 1.04, 1.05881, 0.984215, 1.02584, 1.00935, 0.954421, 1.08367, 1.02867, 1.03788, 0.990527, 0.983577, 1.05592, 1.07864, 1.06366} },
    { 3, {0, 0.908609, 0.894059, 0.927067, 0.909472, 0.931583, 0.993888, 0.967688, 1.05728, 0.941146, 1.00208, 2.07919, 0.924912, 0.937576, 0.996577, 0.921993, 1.07849, 0.954717, 1.06746, 1.03279, 0.99653, 0.919895, 0.973885, 1.01172, 0.995117, 1.08437, 1.01765, 1.05937, 1.12278, 0.894193, 0.815465, 0.963966, 0.989901} },
    { 4, {0, 1.10067, 1.03257, 1.00305, 0.939624, 1.14004, 0.968473, 1.05333, 1.14286, 1.05246, 1.12124, 0.968539, 0.944561, 0.955759, 0.972911, 0.949945, 1.03759, 1.04412, 1.0099, 1.0382, 1.01829, 1.00874, 1.02314, 1.08671, 0.99168, 1.00449, 1.00357, 1.03688, 1.01606, 0.998238, 0.991058, 1.00551, 0.947767} },
    { 5, {0, 1.01863, 1.15837, 0.999607, 1.02834, 0.946385, 1.07761, 1.0014, 1.02295, 0.952564, 1.08196, 0.98728, 0.979934, 0.964858, 1.05115, 0.961767, 1.00451, 0.915431, 0.96694, 1.01099, 0.962522, 0.923966, 1.01651, 1.02074, 1.0347, 0.989343, 1.10527, 0.955558, 1.09947, 0.94087, 1.12991, 0.977529, 1.10202} },
    { 6, {0, 1.04708, 1.01727, 1.07535, 0.993747, 1.04291, 0.998048, 1.10892, 0.98258, 1.07383, 1.06141, 1.06257, 0.900029, 1.08714, 1.03959, 1.00951, 0.932863, 0.935018, 0.954027, 1.01605, 0.975903, 0.956523, 1.02768, 1.08455, 0.973832, 1.00224, 1.06334, 1.01992, 0.990178, 0.975021, 1.04112, 1.05132, 0.972037} },
    { 7, {0, 0.916517, 0.98774, 0.919527, 1.00747, 0.954525, 1.08219, 0.921895, 1.04202, 0.939054, 1.06799, 0.961288, 0.993157, 0.965865, 0.985364, 0.922953, 0.964879, 0.899452, 0.921228, 0.975103, 0.993565, 0.895638, 0.962057, 0.963056, 1.02639, 0.988285, 1.05326, 0.945467, 1.08793, 0.895126, 1.06253, 0.921563, 1.09288} },
    { 8, {0, 1.082, 1.01745, 1.09387, 1.03469, 1.04641, 1.0136, 1.12962, 1.06185, 1.04902, 1.11143, 1.06632, 0.936925, 1.07502, 1.06444, 0.992373, 0.958905, 0.979371, 0.947948, 1.01668, 0.957224, 0.917836, 1.02298, 1.11599, 0.984079, 1.01841, 1.00423, 1.03521, 0.974333, 1.00515, 1.00102, 1.12884, 0.962174} }
  };

  const std::map<Padiwa, std::string> padiwaNameMap {
    { Padiwa::p1500_0, "1500_0" },
    { Padiwa::p1500_1, "1500_1" },
    { Padiwa::p1510_0, "1510_0" },
    { Padiwa::p1510_1, "1510_1" },
    { Padiwa::p1520_0, "1520_0" },
    { Padiwa::p1520_1, "1520_1" },
    { Padiwa::p1530_0, "1530_0" },
    { Padiwa::p1530_1, "1530_1" }
  };

  const std::map<Padiwa, Int_t> padiwaPosMap {
    { Padiwa::p1500_0, 0 },
    { Padiwa::p1500_1, 1 },
    { Padiwa::p1510_0, 2 },
    { Padiwa::p1510_1, 3 },
    { Padiwa::p1520_0, 4 },
    { Padiwa::p1520_1, 5 },
    { Padiwa::p1530_0, 6 },
    { Padiwa::p1530_1, 7 }
  };

  const std::vector<std::string> padiwaNames{ "1500_0",
                                              "1500_1",
                                              "1510_0",
                                              "1510_1",
                                              "1520_0",
                                              "1520_1",
                                              "1530_0",
                                              "1530_1"
  };

} // namespace constants

#endif